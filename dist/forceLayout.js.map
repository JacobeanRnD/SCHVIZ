{"version":3,"sources":["layout.coffee"],"names":[],"mappings":"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","file":"forceLayout.js","sourceRoot":"/source/","sourcesContent":["force = window.forceLayout = {}\n\nKIELER_URL = 'http://kieler.herokuapp.com/live'\nMARGIN = 5\nROUND_CORNER = 5\nCELL_MIN = {w: 15, h: 15}\nCELL_PAD = {top: 12, bottom: 12, left: 12, right: 12}\nEXPORT_PAD = {top: 10, bottom: 10, left: 10, right: 10}\nLABEL_SPACE = 400\nLINK_STRENGTH = .1\nLINK_DISTANCE = 30\nDEBUG_FORCE_FACTOR = 50\nMIN_ZOOM = 1/6\nMAX_ZOOM = 6\nANIMATION_SPEED = 2\nGEOMETRY_VERSION = 2\n\n\nstrip = (obj) ->\n  for key, value of obj\n    if value?\n      if _.isArray(value) and value.length == 0\n        delete obj[key]\n      else if _.isObject(value)\n        strip(value)\n        if _.isEmpty(value)\n          delete obj[key]\n    else\n      delete obj[key]\n  return obj\n\n\ntreeFromXml = (doc) ->\n  parseActions = (container) ->\n    rv = []\n    for child in container.childNodes\n      if child.tagName\n        rv.push(label: \"<#{child.tagName}>\")\n    return rv\n\n  parseChildNodes = (node) ->\n    transitions = []\n    onentry = []\n    onexit = []\n\n    for child in node.childNodes\n      switch child.tagName\n        when 'transition'\n          target = child.getAttribute('target')\n          if target and target.indexOf(' ') > -1\n            throw new Error(\"not implemented: transition with multiple targets\")\n          unless target\n            target = node.getAttribute('id')\n          transitions.push(strip(\n            target: target\n            cond: child.getAttribute('cond') or null\n            event: child.getAttribute('event') or null\n            actions: parseActions(child)\n          ))\n\n        when 'onentry'\n          onentry = onentry.concat(parseActions(child))\n\n        when 'onexit'\n          onexit = onexit.concat(parseActions(child))\n\n    return {\n      transitions: transitions\n      onentry: onentry\n      onexit: onexit\n    }\n\n  parseStates = (node) ->\n    stateList = []\n    for node in node.childNodes\n      state = switch node.tagName\n        when 'initial'\n          {\n            type: 'initial'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'state'\n          {\n            type: 'state'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'final'\n          {\n            type: 'final'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'parallel'\n          {\n            type: 'parallel'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'history'\n          {\n            type: 'history'\n            id: node.getAttribute('id') or null\n            deep: node.getAttribute('type') == 'deep' or null\n          }\n\n      if state?\n        _.extend(state, parseChildNodes(node))\n        stateList.push(strip(state))\n\n    return stateList\n\n  return {sc: parseStates(doc.documentElement)}\n\n\nidMaker = ->\n  counterMap = d3.map()\n  return (prefix='_force_id_') ->\n    counter = counterMap.get(prefix) or 0\n    counter += 1\n    counterMap.set(prefix, counter)\n    return \"#{prefix}#{counter}\"\n\n\nnextId = idMaker()\n\n\nwalk = (node, callback, parent=null, postorder=false) ->\n  callback(node, parent) unless postorder\n  for child in node.children or []\n    walk(child, callback, node, postorder)\n  callback(node, parent) if postorder\n\n\nparents = (node) ->\n  if node.parent then parents(node.parent).concat([node.parent]) else []\n\n\nidPath = (node) ->\n  parents(node).join('/')\n\n\npath = (node1, node2) ->\n  parents1 = parents(node1)\n  parents2 = parents(node2)\n  eq = 0\n  for n in [0 .. d3.min([parents1.length, parents2.length]) - 1]\n    if parents1[n] != parents2[n] then break\n    eq = n\n  return [node1, parents1[eq], node2]\n\n\nmidpoint = (a, b) -> {\n  x: ((a.x or 0) + (b.x or 0)) / 2\n  y: ((a.y or 0) + (b.y or 0)) / 2\n}\n\n\nfindTransition = (transitions, source, target) ->\n  for tr in transitions\n    if tr.a.id == source and tr.b.id == target\n      return tr\n\n\nenvelope = (node, pad={}) ->\n  xValues = []\n  yValues = []\n\n  for box in [].concat(node.children, node.controls)\n    xValues.push(box.x - box.w / 2)\n    xValues.push(box.x + box.w / 2)\n    yValues.push(box.y - box.h / 2)\n    yValues.push(box.y + box.h / 2)\n\n  for tr in node.controls\n    for point in [].concat(tr.route.segment1, tr.route.segment2)\n      xValues.push(point[0])\n      yValues.push(point[1])\n\n  return [\n    d3.min(xValues) - (pad.left or 0)\n    d3.max(xValues) + (pad.right or 0)\n    d3.min(yValues) - (pad.top or 0) - (node.topPadding or 0)\n    d3.max(yValues) + (pad.bottom or 0)\n  ]\n\n\nactionSvg = (options) ->\n  actionR = options.g.append('rect')\n\n  actionT = options.g.append('text')\n      .text(options.action.label)\n      .attr('y', 12)\n\n  actionR\n      .attr('height', h = $(actionT[0][0]).height())\n      .attr('width', w = $(actionT[0][0]).width() + 10)\n      .attr('x', -w/2)\n      .attr('rx', 10)\n      .attr('ry', 10)\n\n  return [w, h]\n\n\nactionBlockSvg = (actions, parentG) ->\n  y = 0\n  maxw = 0\n  for action in actions\n    actionG = parentG.append('g')\n        .attr('class', 'action')\n        .attr('transform', \"translate(0,#{y})\")\n\n    [w, h] = actionSvg(action: action, g: actionG)\n    y += h\n    maxw = d3.max([maxw, w])\n\n  return [maxw, y]\n\n\ntoKielerFormat = (node) ->\n  children = []\n  edges = []\n  for child in node.children or []\n    children.push(toKielerFormat(child))\n  for tr in node.controls or []\n    children.push(\n      id: tr.id\n      desmTransition: true\n      width: tr.w\n      height: tr.h\n      ports: [\n        {id: \"#{tr.id}#enter\", x: 0, y: tr.yPort}\n        {id: \"#{tr.id}#exit\", x: tr.w, y: tr.yPort}\n      ]\n      properties:\n        portConstraints: 'FIXED_POS'\n    )\n    edges.push(\n      id: \"#{tr.id}#1\"\n      source: tr.a.id\n      target: tr.id\n      targetPort: \"#{tr.id}#enter\"\n    )\n    edges.push(\n      id: \"#{tr.id}#2\"\n      source: tr.id\n      target: tr.b.id\n      sourcePort: \"#{tr.id}#exit\"\n    )\n  node_header = node.header or CELL_MIN\n  node_min_size = node.minSize or {w: 0, h: 0}\n  rv = {\n    id: node.id\n    children: children\n    edges: edges\n    padding: {top: node_header.h or 0}\n    width: node_min_size.w\n    height: node_min_size.h\n    properties:\n      minWidth: node_min_size.w\n      minHeight: node_min_size.h\n      sizeConstraint: 'MINIMUM_SIZE'\n  }\n  return rv\n\n\napplyKielerLayout = (options) ->\n  s = options.s\n  graph = options.graph\n  kNodeMap = d3.map()\n  kEdgeMap = d3.map()\n  offsetMap = d3.map()\n\n  offsetMap.set('__ROOT__', {\n    x: -graph.width / 2\n    y: -graph.height / 2\n  })\n  walk graph, (kNode) =>\n    kNodeMap.set(kNode.id, kNode)\n    offset = offsetMap.get(kNode.id)\n    padding = _.extend({top: 0, left: 0}, kNode.padding)\n    for kChild in kNode.children or []\n      offsetMap.set(kChild.id, {\n        x: offset.x + (kNode.x or 0) + (padding.left or 0)\n        y: offset.y + (kNode.y or 0) + (padding.top or 0)\n      })\n    for kEdge in kNode.edges or []\n      kEdgeMap.set(kEdge.id, kEdge)\n\n  traverse = (kNode) ->\n    if kNode.desmTransition\n      tr = s.nodeMap.get(kNode.id)\n      offset1 = offsetMap.get(tr.a.id)\n      offset2 = offsetMap.get(tr.id)\n      kTr = kNodeMap.get(tr.id)\n      tr.x = offset2.x + kTr.x + kTr.width/2\n      tr.y = offset2.y + kTr.y + kTr.height/2\n\n      e1 = kEdgeMap.get(\"#{tr.id}#1\")\n      e2 = kEdgeMap.get(\"#{tr.id}#2\")\n\n      translate1 = (d) -> [offset1.x + d.x, offset1.y + d.y]\n      translate2 = (d) -> [offset2.x + d.x, offset2.y + d.y]\n\n      tr.route = {\n        src: translate1(e1.sourcePoint)\n        segment1: (e1.bendPoints or []).map(translate1)\n        label1: translate1(e1.targetPoint)\n        label2: translate2(e2.sourcePoint)\n        segment2: (e2.bendPoints or []).map(translate2)\n        dst: translate2(e2.targetPoint)\n      }\n\n    else if kNode.id != '__ROOT__'\n      node = s.nodeMap.get(kNode.id)\n      offset = offsetMap.get(kNode.id)\n      node.w = kNode.width\n      node.h = kNode.height\n      node.x = offset.x + (kNode.x or 0) + node.w/2\n      node.y = offset.y + (kNode.y or 0) + node.h/2\n\n    for kChild in kNode.children or []\n      traverse(kChild)\n\n  traverse(graph)\n\n\nkielerLayout = (s, options) ->\n  algorithm = options.algorithm or '__klayjs'\n  top = s.top\n\n  graph = toKielerFormat(top)\n\n  if algorithm == '__klayjs'\n    klay_ready = Q.defer()\n    $klay.layout(\n      graph: graph\n      options:\n        layoutHierarchy: true\n        edgeRouting: 'ORTHOGONAL'\n        feedBackEdges: true\n      success: klay_ready.resolve\n      error: (err) -> klay_ready.reject(new Error(err.text))\n    )\n\n    layoutDone = klay_ready.promise\n\n  else\n    form = {\n      graph: JSON.stringify(graph)\n      config: JSON.stringify(\n        algorithm: algorithm\n        edgeRouting: 'ORTHOGONAL'\n        feedBackEdges: true\n        layoutHierarchy: true\n      )\n      iFormat: 'org.json'\n      oFormat: 'org.json'\n    }\n\n    layoutDone = Q($.post(KIELER_URL, form))\n      .catch (resp) ->\n        throw Error(resp.responseText)\n      .then (resp) ->\n        return JSON.parse(resp)[0]\n\n  return layoutDone\n\n\nclass NewNodesAnimation\n\n  constructor: (@newNodes) ->\n    @deferred = Q.defer()\n    @promise = @deferred.promise\n    @done = no\n    @targetMap = d3.map()\n    @abort() unless @newNodes.length > 0\n\n    for node in @newNodes\n      @targetMap.set(node.id, {w: node.w, h: node.h})\n      node.w = node.h = 5\n\n  tick: ->\n    return if @done\n    changed = no\n    for node in @newNodes\n      target = @targetMap.get(node.id)\n      (node.w += ANIMATION_SPEED; changed = yes) if node.w < target.w\n      (node.h += ANIMATION_SPEED; changed = yes) if node.h < target.h\n\n    @abort() unless changed\n\n  abort: ->\n    @done = yes\n    @deferred.resolve()\n\n\nclass LoadingOverlay\n\n  constructor: (options) ->\n    w = $(options.svg).width()\n    h = $(options.svg).height()\n    @el = d3.select(options.svg).append('g')\n        .attr('class', \"loadingOverlay\")\n    @el.append('rect')\n        .attr('width', w)\n        .attr('height', h)\n    @el.append('text')\n        .attr('x', w/2)\n        .attr('y', h/2)\n        .text(options.text)\n\n  destroy: ->\n    @el.remove()\n\n\nclass force.Layout\n\n  constructor: (options) ->\n    @id = nextId()\n    @queue = async.queue(((task, cb) -> task(cb)), 1)\n    @options = options\n    @debug = options.debug or false\n    @svgCreate(options.parent)\n    @s = @_emptyState()\n    @animation = new NewNodesAnimation([])\n    @_initialTree(options.tree or treeFromXml(options.doc).sc)\n\n  _initialTree: (tree) ->\n    deferred = Q.defer()\n    @initialized = deferred.promise\n\n    @queue.push (cb) =>\n      try\n        @loadTree(tree)\n\n        if @options.geometry?\n          @applyGeometry(@options.geometry)\n          @svgUpdate()\n          cb()\n          deferred.resolve()\n\n        else\n          loading = new LoadingOverlay(svg: @el, text: \"Loading Kieler layout ...\")\n          deferred.resolve(\n            kielerLayout(@s, algorithm: @options.kielerAlgorithm)\n              .then (graph) =>\n                applyKielerLayout(s: @s, graph: graph)\n              .then =>\n                loading.destroy()\n                @svgUpdate()\n                cb()\n          )\n\n      catch e\n        deferred.reject(e)\n        cb()\n\n  update: (doc) ->\n    deferred = Q.defer()\n    @queue.push (cb) =>\n      deferred.resolve(\n        Q()\n        .then =>\n          @loadTree(treeFromXml(doc).sc)\n          kielerLayout(@s, algorithm: @options.kielerAlgorithm)\n        .then (graph) =>\n          applyKielerLayout(s: @s, graph: graph)\n        .then =>\n          @svgUpdate(animate: true)\n        .finally =>\n          cb()\n      )\n\n    return deferred.promise\n\n  _emptyState: ->\n    s = {\n      nodes: []\n      cells: []\n      nodeMap: d3.map()\n      links: []\n      transitions: []\n      top: {\n        id: '__ROOT__'\n        children: []\n        controls: []\n      }\n      newNodes: []\n      dom: d3.map()\n    }\n    s.nodeMap.set(s.top.id, s.top)\n    return s\n\n  loadTree: (tree) ->\n    @mergeTree(tree)\n    @svgNodes()\n    @registerMouseHandlers()\n\n  mergeTree: (tree) ->\n    oldS = @s\n    newS = @_emptyState()\n    newS.top.children = tree\n\n    makeId = idMaker()\n\n    for topNode in tree\n      walk topNode, (node, parent) =>\n        if node.id\n          node.label = node.id\n        else\n          node.id = makeId(\"_node_\")\n          node.label = \"<#{node.type}>\"\n        node.controls = []\n        node.children = node.children or []\n        if (oldNode = oldS.nodeMap.get(node.id))?\n          node.x = oldNode.x\n          node.y = oldNode.y\n          node.header = oldNode.header\n        else\n          if parent?\n            node.x = parent.x\n            node.y = parent.y\n          newS.newNodes.push(node)\n        newS.nodes.push(node)\n        newS.cells.push(node)\n        newS.nodeMap.set(node.id, node)\n        node.parent = if parent? then newS.nodeMap.get(parent.id) else newS.top\n\n    for topNode in tree\n      walk topNode, (node) =>\n        for tr in node.transitions or []\n          unless (target = newS.nodeMap.get(tr.target))?\n            throw Error(\"missing transition target: #{tr.target}\")\n          [a, c, b] = path(node, target)\n          tr.parent = c or newS.top\n          tr.id = tr.id or makeId(\"_transition/#{node.id}/#{target.id}/\")\n          if (oldTr = oldS.nodeMap.get(tr.id))?\n            tr.w = oldTr.w\n            tr.h = oldTr.h\n            tr.yPort = oldTr.yPort\n          else\n            tr.w = 0\n            tr.h = 0\n            tr.yPort = 0\n          newS.nodeMap.set(tr.id, tr)\n          tr.parent.controls.push(tr)\n          newS.nodes.push(tr)\n          for [link_source, link_target] in d3.pairs([a, tr, b])\n            newS.links.push(\n              source: link_source\n              target: link_target\n            )\n          label = tr.event or ''\n          tr.a = a\n          tr.b = b\n          tr.selfie = node.id == tr.target\n          tr.label = label\n          newS.transitions.push(tr)\n          if (oldTr = findTransition(oldS.transitions, tr.a.id, tr.b.id))?\n            _.extend(tr, {x: oldTr.x, y: oldTr.y})\n          else\n            _.extend(tr, midpoint(tr.a, tr.b))\n\n    @s = newS\n\n  saveGeometry: ->\n    round = (x) -> Math.round(x)\n    return JSON.stringify({\n      nodes: {\n        id: n.id\n        w: round(n.w)\n        h: round(n.h)\n        x: round(n.x)\n        y: round(n.y)\n      } for n in @s.nodes\n      transitions: {\n        id: tr.id\n        route: tr.route\n      } for tr in @s.transitions\n      version: GEOMETRY_VERSION\n    })\n\n  applyGeometry: (geom_json) ->\n    geom = JSON.parse(geom_json)\n    return if geom.version != GEOMETRY_VERSION\n    for saved in geom.nodes\n      if (node = @s.nodeMap.get(saved.id))?\n        node.w = saved.w\n        node.h = saved.h\n    for saved in geom.transitions or []\n      if (tr = @s.nodeMap.get(saved.id))?\n        tr.route = saved.route\n    @svgUpdate()\n\n  svgCreate: (parent) ->\n    @zoomBehavior = d3.behavior.zoom()\n        .scaleExtent([MIN_ZOOM, MAX_ZOOM])\n\n    @svg = d3.select(parent).append('svg')\n        .attr('xmlns:xmlns:xlink', 'http://www.w3.org/1999/xlink')\n        .classed('force-layout', true)\n        .classed('debug', @debug)\n    @el = @svg[0][0]\n    defs = @svg.append('defs')\n    @svg.call(@zoomBehavior)\n    @container = @svg.append('g')\n\n    @svg.append('rect')\n        .attr('class', 'zoomRect')\n        .attr('width', '100%')\n        .attr('height', '100%')\n\n    @zoomBehavior.on 'zoom', =>\n        e = d3.event\n        @container.attr('transform', \"translate(#{e.translate}),scale(#{e.scale})\")\n\n    defs.append('marker')\n        .attr('id', \"#{@id}-arrow\")\n        .attr('refX', '7')\n        .attr('refY', '5')\n        .attr('markerWidth', '10')\n        .attr('markerHeight', '10')\n        .attr('orient', 'auto')\n      .append('path')\n        .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n        .attr('class', 'arrow')\n\n    @invalidateSize()\n\n  invalidateSize: ->\n    $parent = $(@el).parent()\n    width = $parent.width() - 5\n    height = $parent.height() - 5\n\n    d3.select(@el)\n        .attr('width', width)\n        .attr('height', height)\n\n    @zoomBehavior\n        .size([width, height])\n        .translate([width / 2, height / 2])\n\n    @zoomBehavior.event(@svg)\n\n  svgNodes: ->\n    cellUpdate = @container.selectAll('.cell')\n        .data(@s.cells, (d) -> d.id)\n\n    newCell = cellUpdate.enter().append('g')\n        .attr('class', (cell) -> \"cell cell-#{cell.type or 'state'} draggable\")\n        .classed('parallel-child', (cell) -> cell.parent.type == 'parallel')\n\n    newCell.append('rect')\n        .attr('class', 'border')\n        .attr('rx', ROUND_CORNER)\n        .attr('ry', ROUND_CORNER)\n\n    newCell.append('g')\n        .attr('class', 'cell-header')\n\n    @container.selectAll('.cell').sort (a, b) ->\n        d3.ascending(idPath(a), idPath(b))\n\n    cellUpdate.each (node) ->\n        if node.type == 'initial'\n          node.minSize = {w: 10, h: 10}\n          return\n\n        header = d3.select(@).select('.cell-header')\n        header.selectAll('*').remove()\n\n        label = header.append('text')\n          .text((node) -> node.label)\n          .attr('y', 12)\n\n        labelTextWidth = $(label[0][0]).width()\n        wLabel = d3.min([labelTextWidth + 2 * ROUND_CORNER, LABEL_SPACE])\n        node.textWidth = wLabel\n\n        onentry = header.append('g')\n        onexit = header.append('g')\n        [wEntry, hEntry] = actionBlockSvg(node.onentry or [], onentry)\n        [wExit, hExit] = actionBlockSvg(node.onexit or [], onexit)\n        w = wEntry + wLabel + wExit\n        h = d3.max([16, hEntry, hExit])\n\n        label.attr('x', wEntry + wLabel / 2 - w/2)\n        onentry.attr('transform', \"translate(#{wEntry/2 - w/2},0)\")\n        onexit.attr('transform', \"translate(#{w/2 - wExit/2},0)\")\n        node.header = {w: w, h: h}\n        node.minSize = {w: w + 10, h: h + 10}\n\n    cellUpdate.exit().remove()\n\n    transitionUpdate = @container.selectAll('.transition')\n        .data(@s.transitions, (d) -> d.id)\n\n    transitionUpdate.enter()\n      .append('g')\n        .attr('class', 'transition')\n      .append('path')\n        .attr('style', \"marker-end: url(##{@id}-arrow)\")\n        .attr('id', (tr) => \"#{@id}-transition/#{tr.id}\")\n\n    transitionUpdate.exit().remove()\n\n    transitionLabelUpdate = @container.selectAll('.transition-label')\n        .data(@s.transitions, (d) -> d.id)\n\n    transitionLabelUpdate.enter()\n      .append('g')\n        .attr('class', 'transition-label draggable')\n      .append('g')\n        .attr('class', 'transition-label-offset')\n\n    transitionLabelUpdate.each (tr) ->\n        offsetG = d3.select(@).select('.transition-label-offset')\n        offsetG.selectAll('*').remove()\n\n        transitionRect = offsetG.append('rect')\n\n        transitionText = offsetG.append('text')\n            .attr('y', 16)\n\n        transitionText.append('tspan')\n            .text(tr.label)\n\n        if tr.cond?\n          transitionText.append('tspan')\n              .text(\"[#{tr.cond}]\")\n              .attr('x', 0)\n              .attr('dy', 16)\n          y += 16\n\n        y = $(transitionText[0][0]).height() + 4\n        tr.yPort = y - 2\n\n        actionBlockG = offsetG.append('g')\n            .attr('transform', \"translate(0,#{y})\")\n        [w, h] = actionBlockSvg(tr.actions or [], actionBlockG)\n        y += h\n        tr.textWidth = d3.min([$(transitionText[0][0]).width() + 5, LABEL_SPACE])\n        tr.w = d3.max([tr.w, tr.textWidth, w])\n        tr.h = y + 4\n\n        offsetG.attr('transform', \"translate(0,#{-tr.h/2})\")\n\n        transitionRect\n            .attr('x', (tr) -> -tr.w / 2)\n            .attr('width', (tr) -> tr.w)\n            .attr('height', (tr) -> tr.h)\n\n    transitionLabelUpdate.exit().remove()\n\n    dom = @s.dom\n\n    @container.selectAll('.cell')\n        .each (node) ->\n          dom.set(\"cell-#{node.id}\", @)\n\n    @container.selectAll('.transition')\n        .each (node) ->\n          dom.set(\"transition-#{node.id}\", @)\n\n  svgUpdate: (options) ->\n    options = _.extend({animate: false}, options)\n\n    if options.animate\n      animate = (sel) -> sel.transition()\n    else\n      animate = (sel) -> sel\n\n    @container.selectAll('.cell')\n        .classed('fixed', (node) -> node.fixed)\n\n    animate(@container.selectAll('.cell'))\n        .attr('transform', (node) -> \"translate(#{node.x},#{node.y})\")\n\n    @container.selectAll('.cell').each (node) ->\n        animate(d3.select(this).select('rect'))\n            .attr('x', - node.w / 2)\n            .attr('y', - node.h / 2)\n            .attr('width', node.w)\n            .attr('height', node.h)\n\n        animate(d3.select(this).select('.cell-header'))\n            .attr 'transform', (node) ->\n              \"translate(0,#{5 - node.h / 2})\"\n\n    animate(@container.selectAll('.transition').select('path'))\n        .attr 'd', (tr) ->\n          d3.svg.line()([].concat(\n            [tr.route.src]\n            tr.route.segment1\n            [tr.route.label1]\n            [tr.route.label2]\n            tr.route.segment2\n            [tr.route.dst]\n          ))\n\n    animate(@container.selectAll('.transition-label'))\n        .attr('transform', (tr) -> \"translate(#{tr.x},#{tr.y})\")\n\n  registerMouseHandlers: ->\n    lock = {node: null, drag: false}\n\n    drag = d3.behavior.drag()\n        .origin((node) -> node)\n        .on 'dragstart', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          (lock.node = node).fixed = true\n          lock.drag = true\n        .on 'drag', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          @moveNode(node, d3.event.dx, d3.event.dy)\n          @adjustLayout()\n          @svgUpdate()\n        .on 'dragend', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          lock.drag = false\n          lock.node = null\n          node.fixed = false\n\n    @container.selectAll('.draggable')\n        .on 'mouseover', (node) =>\n          if lock.drag then return\n          if lock.node then lock.node.fixed = false\n          (lock.node = node).fixed = true\n          @svgUpdate()\n        .on 'mouseout', (node) =>\n          if lock.drag then return\n          lock.node = null\n          node.fixed = false\n          @svgUpdate()\n        .call(drag)\n\n  moveNode: (node, dx, dy) ->\n    node.x += dx\n    node.y += dy\n\n    translate = (p, dx, dy) -> p[0] += dx; p[1] += dy\n\n    if node.route?\n      translate(node.route.label1, dx, dy)\n      translate(node.route.label2, dx, dy)\n\n    else\n      for tr in @s.transitions\n        if tr.a.id == node.id\n          translate(tr.route.src, dx, dy)\n        if tr.b.id == node.id\n          translate(tr.route.dst, dx, dy)\n\n    for child in node.children or []\n      @moveNode(child, dx, dy)\n    for control in node.controls or []\n      @moveNode(control, dx, dy)\n\n  adjustLayout: ->\n    handleCollisions = (parent, center) =>\n      objects = [].concat(parent.children, parent.controls)\n      q = d3.geom.quadtree(objects)\n\n      for node in objects\n        nx1 = node.x - node.w - 100\n        nx2 = node.x + node.w + 100\n        ny1 = node.y - node.h - 100\n        ny2 = node.y + node.h + 100\n\n        collide = (quad, x1, y1, x2, y2) =>\n          other = quad.point\n          if other and (other != node)\n            dx = node.x - other.x\n            dy = node.y - other.y\n            w = (node.w + other.w) / 2 + MARGIN\n            h = (node.h + other.h) / 2 + MARGIN\n\n            cx = w - Math.abs(dx)\n            cy = h - Math.abs(dy)\n            if cx > 0 and cy > 0\n              na = node.w * node.h\n              oa = other.w * other.h\n              f = oa / (oa + na)\n\n              if cx/w < cy/h\n                dy1 = dy2 = 0\n                s = if dx > 0 then 1 else -1\n                dx1 = s * f * cx\n                dx2 = s * (f-1) * cx\n\n              else\n                dx1 = dx2 = 0\n                s = if dy > 0 then 1 else -1\n                dy1 = s * f * cy\n                dy2 = s * (f-1) * cy\n\n              @moveNode(node, dx1, dy1)\n              @moveNode(other, dx2, dy2)\n\n          return x1 > nx2 or x2 < nx1 or y1 > ny2 or y2 < ny1\n\n        q.visit(collide)\n\n\n    adjustNode = (node) =>\n      if node.children.length > 0\n        handleCollisions(node, node)\n        [xMin, xMax, yMin, yMax] = envelope(node, CELL_PAD)\n        grow = node.textWidth - (xMax - xMin)\n        if grow > 0\n          xMin -= grow / 2\n          xMax += grow / 2\n        node.w = xMax - xMin\n        node.h = yMax - yMin\n        dx = xMin + node.w / 2 - node.x\n        dy = yMin + node.h / 2 - node.y\n        node.x += dx\n        node.y += dy\n        if node.fixed\n          @moveNode(node, -dx, -dy)\n\n      node.weight = node.w * node.h\n\n    for node in @s.top.children\n      walk(node, adjustNode, null, true)\n\n    handleCollisions(@s.top, {x: 0, y: 0})\n\n  highlightState: (id, highlight=true) ->\n    @queue.push (cb) =>\n      d3.select(@s.dom.get(\"cell-#{id}\"))\n          .classed('highlight', highlight)\n      cb()\n\n  unhighlightAllStates: ->\n    @queue.push (cb) =>\n      d3.select(@el).selectAll('.cell.highlight')\n          .classed('highlight', false)\n      cb()\n\n  highlightTransition: (source, target, highlight=true) ->\n    @queue.push (cb) =>\n      if (tr = findTransition(@s.transitions, source, target))?\n        d3.select(@s.dom.get(\"transition-#{tr.id}\"))\n            .classed('highlight', highlight)\n      cb()\n\n  fit: ->\n    @queue.push (cb) =>\n      [xMin, xMax, yMin, yMax] = envelope(@s.top, EXPORT_PAD)\n      [w, h] = @zoomBehavior.size()\n      scale = d3.min([w / (xMax - xMin), h / (yMax - yMin)])\n      @zoomBehavior.translate([\n        w / 2 - (xMax + xMin) * scale / 2\n        h / 2 - (yMax + yMin) * scale / 2\n      ])\n      @zoomBehavior.scale(scale)\n      @zoomBehavior.event(@svg)\n      cb()\n\n  exportSvg: (options) ->\n    [xMin, xMax, yMin, yMax] = envelope(@s.top, EXPORT_PAD)\n    div = $('<div style=\"positoin:relative\">')[0]\n    svg = d3.select(div).append('svg')\n        .attr('xmlns', 'http://www.w3.org/2000/svg')\n        .classed('force-layout', true)\n    defs = d3.select(@el).select('defs')[0][0].cloneNode(true)\n    svg[0][0].appendChild(defs)\n    d3.select(defs).append('style').text(options.css)\n    container = @container[0][0].cloneNode(true)\n    d3.select(container).attr('transform', null)\n    svg[0][0].appendChild(container)\n    $(div).find('.zoomRect').remove()\n    $('body').append(div)\n    bbox = container.getBBox()\n    $(div).remove()\n    svg.attr('viewBox', \"#{bbox.x} #{bbox.y} #{bbox.width} #{bbox.height}\")\n    return div.innerHTML\n\nforce.render = (options) ->\n  return new force.Layout(options)\n"]}