{"version":3,"sources":["../../../../var/local/home/mgax/node-envs/desm-vis/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/layout.coffee","src/treeFromXml.coffee"],"names":[],"mappings":"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","file":"forceLayout.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","treeFromXml = require('./treeFromXml.coffee')\n\n\nforce = window.forceLayout = module.exports = {}\n\nKIELER_URL = 'http://kieler.herokuapp.com/live'\nMARGIN = 5\nROUND_CORNER = 5\nCELL_MIN = {w: 40, h: 40}\nCELL_PAD = {top: 20, bottom: 5, left: 5, right: 5}\nLABEL_SPACE = 400\nCONTROL_SIZE = {w: 25, h: 25}\nLINK_STRENGTH = .1\nLINK_DISTANCE = 30\nDEBUG_FORCE_FACTOR = 50\nMIN_ZOOM = 1/6\nMAX_ZOOM = 6\nANIMATION_SPEED = 2\n\n\nnextId = (->\n  last = 0\n  return ->\n    last += 1\n    return \"_force_id_#{last}_\"\n)()\n\n\ndef = (map, key, defaultValue) ->\n  unless map.has(key)\n    map.set(key, defaultValue)\n  return map.get(key)\n\n\nwalk = (node, callback, parent=null, postorder=false) ->\n  callback(node, parent) unless postorder\n  for child in node.children or []\n    walk(child, callback, node, postorder)\n  callback(node, parent) if postorder\n\n\nparents = (node) ->\n  if node.parent then parents(node.parent).concat([node.parent]) else []\n\n\npath = (node1, node2) ->\n  parents1 = parents(node1)\n  parents2 = parents(node2)\n  eq = 0\n  for n in [0 .. d3.min([parents1.length, parents2.length]) - 1]\n    if parents1[n] != parents2[n] then break\n    eq = n\n  return [node1, parents1[eq], node2]\n\n\nexit = (cell, point) ->\n  d = {x: point.x - cell.x, y: point.y - cell.y}\n  ex = cell.w / 2 / d.x\n  ey = cell.h / 2 / d.y\n  e = d3.min([ex, ey], Math.abs)\n  return {x: cell.x + d.x * e, y: cell.y + d.y * e}\n\n\nmidpoint = (a, b) -> {\n  x: ((a.x or 0) + (b.x or 0)) / 2\n  y: ((a.y or 0) + (b.y or 0)) / 2\n}\n\n\ntransitionPath = (tr) ->\n  [a, b, c] = [tr.a, tr.b, tr]\n\n  if tr.selfie\n    w = c.x - a.x\n    h = c.y - a.y\n    c1 = {x: c.x - h/2, y: c.y + w/2}\n    c2 = {x: c.x + h/2, y: c.y - w/2}\n    s = exit(a, c1)\n    t = exit(b, c2)\n    return \"M#{s.x},#{s.y}\n            C#{c1.x},#{c1.y}\n             #{c2.x},#{c2.y}\n             #{t.x},#{t.y}\"\n\n  else\n    s = exit(a, c)\n    t = exit(b, c)\n    m = midpoint(c, midpoint(s, t))\n    d = {x: c.x - m.x, y: c.y - m.y}\n    sm = midpoint(s, m)\n    tm = midpoint(t, m)\n    i = sc = {x: sm.x + d.x, y: sm.y + d.y}\n    j = tc = {x: tm.x + d.x, y: tm.y + d.y}\n    return \"M#{s.x},#{s.y}\n            S#{i.x},#{i.y}\n             #{c.x},#{c.y}\n            S#{j.x},#{j.y}\n             #{t.x},#{t.y}\"\n\n\nfindTransition = (transitions, source, target) ->\n  for tr in transitions\n    if tr.a.id == source and tr.b.id == target\n      return tr\n\n\ntoKielerFormat = (node) ->\n  children = []\n  edges = []\n  for child in node.children or []\n    children.push(toKielerFormat(child))\n    for transition in child.transitions or []\n      edges.push(\n        id: transition.id\n        source: child.id\n        target: transition.target\n      )\n  rv = {\n    id: node.id\n    children: children\n    edges: edges\n  }\n  if node.id?\n    rv.labels = [{text: node.id}]\n  if (node.children or []).length == 0\n    rv.width = node.w\n    rv.height = node.h\n  return rv\n\n\nforce.kielerLayout = (kielerAlgorithm, top) ->\n  edgeMap = d3.map()\n\n  applyLayout = (node, kNode, x0 = null, y0 = null) ->\n    node.w = kNode.width\n    node.h = kNode.height\n\n    unless x0? and y0?\n      x0 = -node.w/2\n      y0 = -node.h/2\n\n    node.x = x0 + kNode.x + node.w/2\n    node.y = y0 + kNode.y + node.h/2\n\n    for tr in node.transitions or []\n      edge = edgeMap.get(tr.id)\n      if edge.bendPoints.length\n        points = edge.bendPoints\n      else\n        points = [edge.sourcePoint, edge.targetPoint]\n      tr.x = x0 + d3.mean(points, (p) -> p.x)\n      tr.y = y0 + d3.mean(points, (p) -> p.y)\n\n    childMap = d3.map()\n    for child in node.children or []\n      if child.id? then childMap.set(child.id, child)\n\n    for kChild in kNode.children or []\n      unless (child = childMap.get(kChild.id))? then continue\n      applyLayout(child, kChild, node.x - node.w/2, node.y - node.h/2)\n\n  graph = toKielerFormat(top)\n\n  form = {\n    graph: JSON.stringify(graph)\n    config: JSON.stringify(\n      algorithm: kielerAlgorithm\n    )\n    iFormat: 'org.json'\n    oFormat: 'org.json'\n  }\n\n  return Q($.post(KIELER_URL, form))\n    .then (resp) ->\n      graphLayout = JSON.parse(resp)[0]\n      walk graphLayout, (kNode) =>\n        for edge in kNode.edges or []\n          edgeMap.set(edge.id, edge)\n      applyLayout(top, graphLayout)\n    .catch (resp) ->\n      throw Error(resp.responseText)\n\n\nclass NewNodesAnimation\n\n  constructor: (@newNodes) ->\n    @deferred = Q.defer()\n    @promise = @deferred.promise\n    @done = no\n    @targetMap = d3.map()\n    @abort() unless @newNodes.length > 0\n\n    for node in @newNodes\n      @targetMap.set(node.id, {w: node.w, h: node.h})\n      node.w = node.h = 5\n\n  tick: ->\n    return if @done\n    changed = no\n    for node in @newNodes\n      target = @targetMap.get(node.id)\n      (node.w += ANIMATION_SPEED; changed = yes) if node.w < target.w\n      (node.h += ANIMATION_SPEED; changed = yes) if node.h < target.h\n\n    @abort() unless changed\n\n  abort: ->\n    @done = yes\n    @deferred.resolve()\n\n\nclass force.Layout\n\n  constructor: (options) ->\n    @queue = async.queue(((task, cb) -> task(cb)), 1)\n    @options = options\n    @debug = options.debug or false\n    @svgCreate(options.parent)\n    @runSimulation = false\n    @s = @_emptyState()\n    @animation = new NewNodesAnimation([])\n    @_initialTree(options.tree or treeFromXml(options.doc).sc)\n\n  _initialTree: (tree) ->\n    @queue.push (cb) =>\n      @loadTree(tree)\n\n      force.kielerLayout(@options.kielerAlgorithm, @s.top)\n        .then (treeWithLayout) =>\n          @beginSimulation()\n        .catch (e) =>\n          @el = $('<div>').text(e.message).replaceAll(@el)[0]\n        .done(cb)\n\n  update: (doc) ->\n    @queue.push (cb) =>\n      @loadTree(treeFromXml(doc).sc)\n      @beginSimulation()\n      @s.newNodes = [] unless @runSimulation\n      @animation = new NewNodesAnimation(@s.newNodes)\n      @animation.promise.done(cb)\n\n  _emptyState: -> {\n      nodes: []\n      cells: []\n      nodeMap: d3.map()\n      links: []\n      transitions: []\n      top: {\n        children: []\n        controls: []\n      }\n      newNodes: []\n      dom: d3.map()\n    }\n\n  loadTree: (tree) ->\n    @mergeTree(tree)\n    @svgNodes()\n\n  beginSimulation: ->\n    @setupD3Layout()\n    @layout.on 'tick', =>\n      @adjustLayout()\n      @svgUpdate()\n      @animation.tick()\n    @svgUpdate()\n\n  mergeTree: (tree) ->\n    @layout.stop() if @layout\n    oldS = @s\n    @s = @_emptyState()\n    @s.top.children = tree\n\n    for topNode in tree\n      walk topNode, (node, parent) =>\n        node.controls = []\n        node.children = node.children or []\n        if (oldNode = oldS.nodeMap.get(node.id))?\n          node.x = oldNode.x\n          node.y = oldNode.y\n          node.w = oldNode.w\n          node.h = oldNode.h\n        else\n          node.w = CELL_MIN.w\n          node.h = CELL_MIN.h\n          if parent?\n            node.x = parent.x\n            node.y = parent.y\n          @s.newNodes.push(node)\n        @s.nodes.push(node)\n        @s.cells.push(node)\n        @s.nodeMap.set(node.id, node)\n        node.parent = if parent? then @s.nodeMap.get(parent.id) else @s.top\n\n    for topNode in tree\n      walk topNode, (node) =>\n        for tr in node.transitions or []\n          unless (target = @s.nodeMap.get(tr.target))?\n            throw Error(\"missing transition target: #{tr.target}\")\n          [a, c, b] = path(node, target)\n          tr.parent = c or @s.top\n          tr.w = CONTROL_SIZE.w\n          tr.h = CONTROL_SIZE.h\n          tr.id = tr.id or nextId()\n          tr.parent.controls.push(tr)\n          @s.nodes.push(tr)\n          for [link_source, link_target] in d3.pairs([a, tr, b])\n            @s.links.push(\n              source: link_source\n              target: link_target\n            )\n          label = tr.event or ''\n          tr.a = a\n          tr.b = b\n          tr.selfie = node.id == tr.target\n          tr.label = label\n          @s.transitions.push(tr)\n          if (oldTr = findTransition(oldS.transitions, tr.a.id, tr.b.id))?\n            _.extend(tr, {x: oldTr.x, y: oldTr.y})\n          else\n            _.extend(tr, midpoint(tr.a, tr.b))\n\n  svgCreate: (parent) ->\n    width = $(parent).width() - 5\n    height = $(parent).height() - 5\n\n    zoom = d3.behavior.zoom()\n        .scaleExtent([MIN_ZOOM, MAX_ZOOM])\n\n    svg = d3.select(parent).append('svg')\n        .classed('force-layout', true)\n        .classed('debug', @debug)\n    @el = svg[0][0]\n    defs = svg.append('defs')\n    zoomNode = svg.append('g')\n    @container = zoomNode.call(zoom).append('g')\n    zoomRect = @container.append('rect')\n        .attr('class', 'zoomRect')\n\n    svg.attr('width', width).attr('height', height)\n\n    zoomRect\n        .attr('width', width / MIN_ZOOM)\n        .attr('height', height / MIN_ZOOM)\n        .attr('x', - width / 2 / MIN_ZOOM)\n        .attr('y', - height / 2 / MIN_ZOOM)\n\n    zoom.on 'zoom', =>\n        e = d3.event\n        @container.attr('transform', \"translate(#{e.translate}),scale(#{e.scale})\")\n\n    zoom.size([width, height])\n        .translate([width / 2, height / 2])\n        .event(zoomNode)\n\n    defs.append('marker')\n        .attr('id', (@_arrow_id = nextId()))\n        .attr('refX', '7')\n        .attr('refY', '5')\n        .attr('markerWidth', '10')\n        .attr('markerHeight', '10')\n        .attr('orient', 'auto')\n      .append('path')\n        .attr('d', 'M 0 0 L 10 5 L 0 10 z')\n        .attr('class', 'arrow')\n\n  svgNodes: ->\n    @container.selectAll('.cell').remove()\n    @container.selectAll('.transition').remove()\n    @container.selectAll('.transition-label').remove()\n\n    cell = @container.selectAll('.cell')\n        .data(@s.cells)\n      .enter().append('g')\n        .attr('class', (cell) -> \"cell cell-#{cell.type or 'state'} draggable\")\n        .classed('parallel-child', (cell) -> cell.parent.type == 'parallel')\n\n    cell.append('rect')\n        .attr('class', 'border')\n        .attr('rx', ROUND_CORNER)\n        .attr('ry', ROUND_CORNER)\n\n    cell.append('text')\n        .text((node) -> node.id)\n        .each (node) ->\n          node.textWidth = d3.min([$(@).width() + 2 * ROUND_CORNER, LABEL_SPACE])\n          node.w = d3.max([node.w, node.textWidth])\n\n    @container.selectAll('.transition')\n        .data(@s.transitions)\n      .enter().append('g')\n        .attr('class', 'transition')\n      .append('path')\n        .attr('style', \"marker-end: url(##{@_arrow_id})\")\n\n    @container.selectAll('.transition-label')\n        .data(@s.transitions)\n      .enter().append('g')\n        .attr('class', 'transition-label draggable')\n      .append('text')\n        .text((tr) -> tr.label)\n        .each (tr) ->\n          tr.textWidth = d3.min([$(@).width() + 5, LABEL_SPACE])\n          tr.w = d3.max([tr.w, tr.textWidth])\n        .attr('dy', '.3em')\n\n    @container.selectAll('.transition-label').append('rect')\n        .attr('x', (tr) -> -tr.w / 2)\n        .attr('y', (tr) -> -tr.h / 2)\n        .attr('width', (tr) -> tr.w)\n        .attr('height', (tr) -> tr.h)\n\n    dom = @s.dom\n\n    @container.selectAll('.cell')\n        .each (node) ->\n          dom.set(\"cell-#{node.id}\", @)\n\n    @container.selectAll('.transition')\n        .each (node) ->\n          dom.set(\"transition-#{node.id}\", @)\n\n  svgUpdate: ->\n    @container.selectAll('.cell')\n        .attr('transform', (node) -> \"translate(#{node.x},#{node.y})\")\n        .classed('fixed', (node) -> node.fixed)\n\n    @container.selectAll('.cell').each (node) ->\n        d3.select(this).select('rect')\n            .attr('x', - node.w / 2)\n            .attr('y', - node.h / 2)\n            .attr('width', node.w)\n            .attr('height', node.h)\n\n        d3.select(this).select('text')\n            .attr('y', (node) -> CELL_PAD.top - node.h / 2 - 5)\n\n    @container.selectAll('.selfie').remove()\n\n    @container.selectAll('.transition').selectAll('path')\n        .attr 'd', transitionPath\n\n    @container.selectAll('.transition-label')\n        .attr('transform', (tr) -> \"translate(#{tr.x},#{tr.y})\")\n\n  setupD3Layout: ->\n    @layout = d3.layout.force()\n        .charge(0)\n        .gravity(0)\n        .linkStrength(LINK_STRENGTH)\n        .linkDistance(LINK_DISTANCE)\n        .nodes(@s.nodes)\n        .links(@s.links)\n        .start()\n\n    @layout.stop() unless @runSimulation\n\n    lock = {node: null, drag: false}\n\n    drag = d3.behavior.drag()\n        .origin((node) -> node)\n        .on 'dragstart', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          (lock.node = node).fixed = true\n          lock.drag = true\n        .on 'drag', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          node.px = d3.event.x\n          node.py = d3.event.y\n          if @runSimulation\n            @layout.resume()\n          else\n            node.x = node.px\n            node.y = node.py\n            @adjustLayout()\n            @svgUpdate()\n        .on 'dragend', (node) =>\n          d3.event.sourceEvent.stopPropagation()\n          lock.drag = false\n          lock.node = null\n          node.fixed = false\n\n    @container.selectAll('.draggable')\n        .on 'mouseover', (node) =>\n          if lock.drag then return\n          if lock.node then lock.node.fixed = false\n          (lock.node = node).fixed = true\n          node.px = node.x\n          node.py = node.y\n          @svgUpdate()\n        .on 'mouseout', (node) =>\n          if lock.drag then return\n          lock.node = null\n          node.fixed = false\n          @svgUpdate()\n        .call(drag)\n\n  adjustLayout: ->\n    tick = {\n      gravity: @layout.alpha() * 0.1\n      forces: d3.map()\n    }\n\n    move = (node, dx, dy) ->\n      node.x += dx\n      node.y += dy\n      for child in node.children or []\n        move(child, dx, dy)\n      for control in node.controls or []\n        move(control, dx, dy)\n\n\n    handleCollisions = (parent, center, tick) =>\n      for child in parent.children\n        dx = (center.x - child.x) * tick.gravity\n        dy = (center.y - child.y) * tick.gravity\n        move(child, dx, dy)\n        def(tick.forces, child.id, []).push(value: [dx, dy], cls: 'gravity')\n\n      objects = [].concat(parent.children, parent.controls)\n      q = d3.geom.quadtree(objects)\n\n      for node in objects\n        nx1 = node.x - node.w - 100\n        nx2 = node.x + node.w + 100\n        ny1 = node.y - node.h - 100\n        ny2 = node.y + node.h + 100\n\n        collide = (quad, x1, y1, x2, y2) =>\n          other = quad.point\n          if other and (other != node)\n            dx = node.x - other.x\n            dy = node.y - other.y\n            w = (node.w + other.w) / 2 + MARGIN\n            h = (node.h + other.h) / 2 + MARGIN\n\n            cx = w - Math.abs(dx)\n            cy = h - Math.abs(dy)\n            if cx > 0 and cy > 0\n              na = node.w * node.h\n              oa = other.w * other.h\n              f = oa / (oa + na)\n\n              if cx/w < cy/h\n                dy1 = dy2 = 0\n                s = if dx > 0 then 1 else -1\n                dx1 = s * f * cx\n                dx2 = s * (f-1) * cx\n\n              else\n                dx1 = dx2 = 0\n                s = if dy > 0 then 1 else -1\n                dy1 = s * f * cy\n                dy2 = s * (f-1) * cy\n\n              move(node, dx1, dy1)\n              move(other, dx2, dy2)\n              def(tick.forces, node.id, []).push(value: [dx1, dy1], cls: 'collision')\n              def(tick.forces, other.id, []).push(value: [dx2, dy2], cls: 'collision')\n\n          return x1 > nx2 or x2 < nx1 or y1 > ny2 or y2 < ny1\n\n        q.visit(collide)\n\n\n    adjustNode = (node) =>\n      if node.children.length > 0\n        handleCollisions(node, node, tick)\n\n        contents = [].concat(node.children, node.controls)\n        xMin = d3.min(contents, (d) -> d.x - d.w / 2) - CELL_PAD.left\n        xMax = d3.max(contents, (d) -> d.x + d.w / 2) + CELL_PAD.right\n        yMin = d3.min(contents, (d) -> d.y - d.h / 2) - CELL_PAD.top\n        yMax = d3.max(contents, (d) -> d.y + d.h / 2) + CELL_PAD.bottom\n        grow = node.textWidth - (xMax - xMin)\n        if grow > 0\n          xMin -= grow / 2\n          xMax += grow / 2\n        node.w = xMax - xMin\n        node.h = yMax - yMin\n        dx = xMin + node.w / 2 - node.x\n        dy = yMin + node.h / 2 - node.y\n        node.x += dx\n        node.y += dy\n        if node.fixed\n          move(node, -dx, -dy)\n\n      node.weight = node.w * node.h\n\n    for node in @s.top.children\n      walk(node, adjustNode, null, true)\n\n    handleCollisions(@s.top, {x: 0, y: 0}, tick)\n\n    if @debug\n      @container.selectAll('.cell .force').remove()\n\n      @container.selectAll('.cell')\n          .each (node) ->\n            for force in tick.forces.get(node.id) or []\n              d3.select(@).append('line')\n                  .attr('class', \"force #{force.cls}\")\n                  .attr('x1', 0)\n                  .attr('y1', 0)\n                  .attr('x2', force.value[0] * DEBUG_FORCE_FACTOR)\n                  .attr('y2', force.value[1] * DEBUG_FORCE_FACTOR)\n\n  start: ->\n    @runSimulation = true\n    @layout.start() if @layout?\n\n  stop: ->\n    @runSimulation = false\n    @layout.stop() if @layout?\n\n  highlightState: (id, highlight=true) ->\n    d3.select(@s.dom.get(\"cell-#{id}\"))\n        .classed('highlight', highlight)\n\n  highlightTransition: (source, target, highlight=true) ->\n    if (tr = findTransition(@s.transitions, source, target))?\n      d3.select(@s.dom.get(\"transition-#{tr.id}\"))\n          .classed('highlight', highlight)\n\n\nforce.render = (options) ->\n  return new force.Layout(options)\n","strip = (obj) ->\n  for key, value of obj\n    if value?\n      if _.isArray(value) and value.length == 0\n        delete obj[key]\n      else if _.isObject(value)\n        strip(value)\n        if _.isEmpty(value)\n          delete obj[key]\n    else\n      delete obj[key]\n  return obj\n\n\nmodule.exports = (doc) ->\n  parseActions = (container) ->\n    rv = []\n    for child in container.childNodes\n      if child.tagName\n        rv.push(xml: '' + child)\n    return rv\n\n  parseChildNodes = (node) ->\n    transitions = []\n    onentry = []\n    onexit = []\n\n    for child in node.childNodes\n      switch child.tagName\n        when 'transition'\n          target = child.getAttribute('target')\n          unless target\n            throw new Error(\"not implemented: transition with no target\")\n          if target.indexOf(' ') > -1\n            throw new Error(\"not implemented: transition with multiple targets\")\n          transitions.push(strip(\n            target: target\n            cond: child.getAttribute('cond') or null\n            event: child.getAttribute('event') or null\n            actions: parseActions(child)\n          ))\n\n        when 'onentry'\n          onentry = onentry.concat(parseActions(child))\n\n        when 'onexit'\n          onexit = onexit.concat(parseActions(child))\n\n    return {\n      transitions: transitions\n      onentry: onentry\n      onexit: onexit\n    }\n\n  parseStates = (node) ->\n    stateList = []\n    for node in node.childNodes\n      state = switch node.tagName\n        when 'initial'\n          {\n            type: 'initial'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'state'\n          {\n            type: 'state'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'final'\n          {\n            type: 'final'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'parallel'\n          {\n            type: 'parallel'\n            id: node.getAttribute('id') or null\n            children: parseStates(node)\n          }\n\n        when 'history'\n          {\n            type: 'history'\n            id: node.getAttribute('id') or null\n            deep: node.getAttribute('type') == 'deep' or null\n          }\n\n      if state?\n        _.extend(state, parseChildNodes(node))\n        stateList.push(strip(state))\n\n    return stateList\n\n  return {sc: parseStates(doc.documentElement)}\n"]}